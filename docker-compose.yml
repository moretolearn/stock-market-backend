version: '3'

services:

  #service 1 : mysql
  sm-mysql:
    image: mysql:oracle
    container_name: sm-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: stock_market
      MYSQL_USER: stock
      MYSQL_PASSWORD: stock123
    ports:
      - "3307:3306"
    restart: always
   #service 2 : command Service
  sm-command:
    image: commandservice
    container_name: sm-command
    build:
      context: .
      dockerfile: ./commandservice/Dockerfile
    ports:
      - "8081:8081"
    restart: always
    command: --spring.profiles.active=docker
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - sm-mysql
      - kafka
      - sm-registry
    #service 3 : zookeeper
  zookeeper:
    image: wurstmeister/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    # service 4 : kafka
  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "stock_market:1:1"
    #service 5 : queryservice
  sm-query:
    image: queryservice
    container_name: sm-query
    build:
      context: .
      dockerfile: ./queryservice/Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      - sm-mongo
      - kafka
      - sm-registry
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    command: --spring.profiles.active=docker
    #service 6 : mongodb
  sm-mongo:
    image: "mongo:latest"
    container_name: sm-mongo
    restart: always
    ports:
      - 27017:27017
  #  apigateway
  sm-apigateway:
    image: apigateway
    container_name: sm-apigateway
    build:
      context: .
      dockerfile: ./apigateway/Dockerfile
    ports:
      - "8083:8083"
    restart: always
    command: --spring.profiles.active=docker
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - sm-registry
      - sm-command
      - sm-query
      - sm-auth
#  authservice
  sm-auth:
    image: authservice
    container_name: sm-auth
    build:
      context: .
      dockerfile: ./authservice/Dockerfile
    ports:
      - "9191:9191"
    restart: always
    command: --spring.profiles.active=docker
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - sm-registry
      
#  registryservice
  sm-registry:
    image: registryservice
    container_name: sm-registry
    build:
      context: .
      dockerfile: ./serviceregistry/Dockerfile
    ports:
      - "8761:8761"
    restart: always
    command: --spring.profiles.active=docker
    environment:
      - SPRING_PROFILES_ACTIVE=docker
        
   #service 7 : frontend from dockerhub

  frontend_angular:
    image: "yanumularammohan661/stockmarket:latest"
    container_name: stockmarket
    ports:
      - "80:80"
    restart: always
    depends_on:
      - sm-auth
      - sm-command
      - sm-query
      - sm-registry